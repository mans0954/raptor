//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-792 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.11.08 at 06:23:17 PM GMT 
//


package uk.ac.cardiff.raptor.sdmx.compact;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CL_TIME_FORMAT.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="CL_TIME_FORMAT">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="P1Y"/>
 *     &lt;enumeration value="P6M"/>
 *     &lt;enumeration value="P3M"/>
 *     &lt;enumeration value="P1M"/>
 *     &lt;enumeration value="P7D"/>
 *     &lt;enumeration value="P1D"/>
 *     &lt;enumeration value="PT1M"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "CL_TIME_FORMAT")
@XmlEnum
public enum CLTIMEFORMAT {


    /**
     * Annual
     * 
     */
    @XmlEnumValue("P1Y")
    P_1_Y("P1Y"),

    /**
     * Semi-annual
     * 
     */
    @XmlEnumValue("P6M")
    P_6_M("P6M"),

    /**
     * Quarterly
     * 
     */
    @XmlEnumValue("P3M")
    P_3_M("P3M"),

    /**
     * Monthly
     * 
     */
    @XmlEnumValue("P1M")
    P_1_M("P1M"),

    /**
     * Weekly
     * 
     */
    @XmlEnumValue("P7D")
    P_7_D("P7D"),

    /**
     * Daily
     * 
     */
    @XmlEnumValue("P1D")
    P_1_D("P1D"),

    /**
     * Minutely
     * 
     */
    @XmlEnumValue("PT1M")
    PT_1_M("PT1M");
    private final String value;

    CLTIMEFORMAT(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CLTIMEFORMAT fromValue(String v) {
        for (CLTIMEFORMAT c: CLTIMEFORMAT.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
