<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2010 Cardiff University, Wales <smartp@cf.ac.uk>

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">


	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />


	<!--  WEB SERVICE ENDPOINT INTERFACE (SEI) SETUP -->
	<jaxws:endpoint
	  id="muaEndpoint"
	  implementor="#muaEndpointInterface"
	  address="/MultiUnitAggregator" >
	  	<jaxws:serviceFactory>
			<ref bean='jaxws-and-aegis-service-factory' />
		</jaxws:serviceFactory>

			<!-- output all CXF intercepter chain messages to a logging class, rather than the stdOUT, DOES not work 
		<jaxws:properties>
			<entry key="org.apache.cxf.logging.FaultLogger">
				<bean class="uk.ac.cardiff.raptorcommon.loggers.SOAPFaultLogger"/>
			</entry>
		</jaxws:properties>-->
	  </jaxws:endpoint>

	  <bean id="muaEndpointInterface" class="uk.ac.cardiff.raptormua.wsinterface.impl.MultiUnitAggregatorImpl">
		<property name="processService">
			<ref bean="MUAProcess"></ref>
		</property>
	</bean>

	<bean id="aegisBean" class="org.apache.cxf.aegis.databinding.AegisDatabinding"
		scope="prototype" />
	<bean id="jaxws-and-aegis-service-factory" class="org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean"
		scope="prototype">
		<property name="dataBinding" ref="aegisBean" />
		<property name="properties">
			<map>
				<entry key="writeXsiType">
					<value type="java.lang.Boolean">true</value>
				</entry>
				<entry key="overrideTypesList">
					<list>
					<!--  THIS LIST IS IMPORTANT, it exposes these classes to the aegis XSD creator
					so we can output the generic Entry class in lists in the Collector Service Endpoint Class
					but actually output any of its subclasses. Hence, this is a way of dealing with
					inheritence in CXF and aegis -->
						<value>uk.ac.cardiff.model.AuthenticationEntry</value>
						<value>uk.ac.cardiff.model.ShibbolethEntry</value>
						<value>uk.ac.cardiff.model.UsageEntry</value>
						<!-- <value>org.sdmx.resources.sdmxml.schemas.v2_0.message.CompactDataType</value>-->
					</list>
				</entry>
			</map>
		</property>
	</bean>

	<!--  DONE -->

	<bean id="MUAProcess" class="uk.ac.cardiff.raptormua.service.impl.MUAProcessImpl">
		<property name="engine">
			<ref bean="MUAEngine"></ref>
		</property>
	</bean>
	
	

	<!--
		this bean config kicks of the singleton engine instance which is then
		used by all services of the MUA
	-->
	<bean id="MUAEngine" class="uk.ac.cardiff.raptormua.engine.MUAEngine">
		<property name="uaRegistry"><ref bean="uaRegistry"/></property>
		<property name="statisticsHandler"><ref bean="statisticalUnits"/></property>
		<property name="entryHandler"><ref bean="persistantEntryHandler"></ref></property>
		<property name="muaMetadata"><ref bean="MUAMetadata"></ref></property>
	</bean>
	
	<!-- MUA Metadata -->
	<bean id="MUAMetadata" class="uk.ac.cardiff.model.MUAMetadata">
		<property name="muaName"><value>Cardiff University's MUA</value></property>
		<property name="organisationName"><value>Cardiff University</value></property>
		<property name="contactEmail"><value>smartp@cf.ac.uk</value></property>
	</bean>

	<!-- Create the entry handler -->
	<bean name="memoryEntryHandler" class="uk.ac.cardiff.raptormua.model.MemoryEntryHandler"></bean>
	<bean name="persistantEntryHandler" class="uk.ac.cardiff.raptormua.model.PersistantEntryHandler">
		<constructor-arg index="0"><ref bean="dataConnectionImpl"></ref></constructor-arg>
	</bean>

	<!-- Polling trigger setup -->

	<bean id="MUAProcessTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref local="MUAProcessJobDetail" />
		</property>
		<property name="cronExpression">
			<value>0 * * * * ?</value>
		</property>
	</bean>

	<bean id="MUAProcessQuickTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail">
			<ref local="MUAProcessJobDetail" />
		</property>
		<property name="repeatInterval" value="10000" />
		<property name="repeatCount" value="0" />
	</bean>

	<bean id="MUAProcessJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="MUAProcess" />
		</property>
		<property name="targetMethod">
			<value>poll</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list><!--
				<ref local="ICAProcessTrigger" />
				-->
				<ref local="MUAProcessQuickTrigger" />
			</list>
		</property>
	</bean>
	<!--  DONE -->

	  <import resource="dao-beans.xml"/>
	  <import resource="ua-registry.xml" />
	  <import resource="statistical-units.xml" />

</beans>
