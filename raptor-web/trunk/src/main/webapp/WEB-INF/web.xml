<?xml version = '1.0' encoding = 'ISO-8859-1'?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	you under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
	version="2.4">

	<description>RaptorWeb</description>


	<!-- - defines setup that can be accessed by the entire servlet, not just 
		spring hence why security is defined here -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
          /WEB-INF/config/security.xml
      </param-value>
	</context-param>

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Use client-side state saving. In Trinidad, it is an optimized, token-based 
		mechanism that is almost always a better choice than the standard JSF server-side 
		state saving. -->
	<context-param>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<!-- <param-value>client</param-value> -->
		<param-value>server</param-value>
	</context-param>

	<!-- Trinidad by default uses an optimized client-side state saving mechanism. 
		To disable that, uncomment the following -->
	<!--context-param> <param-name>org.apache.myfaces.trinidad.CLIENT_STATE_METHOD</param-name> 
		<param-value>all</param-value> </context-param -->

	<!-- Trinidad also supports an optimized strategy for caching some view 
		state at an application level, which significantly improves scalability. 
		However, it makes it harder to develop (updates to pages will not be noticed 
		until the server is restarted), and in some rare cases cannot be used for 
		some pages (see Trinidad documentation for more information) -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.USE_APPLICATION_VIEW_CACHE</param-name>
		<param-value>false</param-value>
	</context-param>

	<!-- If this parameter is enabled, Trinidad will automatically check the 
		modification date of your JSPs, and discard saved state when they change; 
		this makes development easier, but adds overhead that should be avoided when 
		your application is deployed -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- Enables Change Persistence at a session scope. By default, Change Persistence 
		is entirely disabled. The ChangeManager is an API, which can persist component 
		modifications (like, is a showDetail or tree expanded or collapsed). For 
		providing a custom Change Persistence implementation inherit from the Trinidad 
		API's ChangeManager class. As the value you have to use the fullqualified 
		class name. -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CHANGE_PERSISTENCE</param-name>
		<param-value>session</param-value>
	</context-param>

	<!-- Enables DEBUG information -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.resource.DEBUG</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- Trinidad - Facelets config -->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.ALTERNATE_VIEW_HANDLER</param-name>
		<param-value>com.sun.facelets.FaceletViewHandler</param-value>
	</context-param>
	<context-param>
		<param-name>facelets.VIEW_MAPPINGS</param-name>
		<param-value>*.jspx</param-value>
	</context-param>
	<context-param>
		<param-name>facelets.SKIP_COMMENTS</param-name>
		<param-value>true</param-value>
	</context-param>
	<!-- Use JSF view templates saved as *.xhtml, for use with Facelets -->
	<context-param>
		<param-name>javax.faces.DEFAULT_SUFFIX</param-name>
		<param-value>.jspx</param-value>
	</context-param>
	<!-- Enables special Facelets debug output during development -->
	<context-param>
		<param-name>facelets.DEVELOPMENT</param-name>
		<param-value>true</param-value>
	</context-param>
	<!-- Causes Facelets to refresh templates during development -->
	<context-param>
		<param-name>facelets.REFRESH_PERIOD</param-name>
		<param-value>1</param-value>
	</context-param>

	<!-- Filtros -->
	<filter>
		<filter-name>trinidad</filter-name>
		<filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>trinidad</filter-name>
		<servlet-name>faces</servlet-name>
	</filter-mapping>

	<filter-mapping>
		<filter-name>trinidad</filter-name>
		<servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
	</filter-mapping>

	<!-- catch bad URLS for trinidad ADF components -->
	<filter>
		<filter-name>TrinidadServletFilter</filter-name>
		<filter-class>uk.ac.cardiff.raptorweb.servlet.TrinidadServletFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>TrinidadServletFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Enforce UTF-8 Character Encoding -->
	<filter>
		<filter-name>charEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>ISO-8859-1</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>charEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- Listener for spring -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<!-- Listener, to allow Jetty serving MyFaces apps -->
	<listener>
		<listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
	</listener>

	<!-- Spring web flow servlet, defines config specific to the current application 
		instance -->
	<servlet>
		<servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/raptorweb-servlet.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- allows spring security to monitor the HTTPSession, so on logout the 
		session is released furthermore, this is required to allow concurrency control 
		e.g. 1 user session max, otherwise sessions are only every timed out -->
	<listener>
		<listener-class>
			org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
	</listener>

	<!-- Serves static resource content from .jar files such as spring-faces.jar -->
	<servlet>
		<servlet-name>Resources Servlet</servlet-name>
		<servlet-class>org.springframework.js.resource.ResourceServlet</servlet-class>
		<load-on-startup>0</load-on-startup>
	</servlet>

	<!-- Faces Servlet -->
	<servlet>
		<servlet-name>faces</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
	</servlet>

	<!-- resource loader servlet -->
	<servlet>
		<servlet-name>resources</servlet-name>
		<servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
	</servlet>

	<!-- Faces Servlet Mappings -->
	<servlet-mapping>
		<servlet-name>faces</servlet-name>
		<url-pattern>/faces/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>resources</servlet-name>
		<url-pattern>/adf/*</url-pattern>
	</servlet-mapping>

	<!-- Spring web flow servlet mapping -->
	<servlet-mapping>
		<servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
		<url-pattern>/spring/*</url-pattern>
	</servlet-mapping>

	<!-- Welcome Files -->
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

</web-app>