<?xml version="1.0" encoding="UTF-8"?>
	<!--

		Copyright (C) 2010 Cardiff University, Wales <smartp@cf.ac.uk>

		Licensed under the Apache License, Version 2.0 (the "License"); you
		may not use this file except in compliance with the License. You may
		obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">


	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<!--  WEB SERVICE ENDPOINT INTERFACE (SEI) SETUP -->
	<jaxws:endpoint id="collector" implementor="#CollectorEndpoint"
		address="/Collector">
		<jaxws:serviceFactory>
			<ref bean='jaxws-and-aegis-service-factory' />
		</jaxws:serviceFactory>
	</jaxws:endpoint>

	<bean id="CollectorEndpoint" class="main.uk.ac.cf.wsinterface.impl.CollectorImpl">
		<property name="processEngine">
			<ref bean="ICAProcess"></ref>
		</property>
	</bean>

	<bean id="aegisBean" class="org.apache.cxf.aegis.databinding.AegisDatabinding"
		scope="prototype" />
	<bean id="jaxws-and-aegis-service-factory" class="org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean"
		scope="prototype">
		<property name="dataBinding" ref="aegisBean" />
		<property name="properties">
			<map>
				<entry key="writeXsiType">
					<value type="java.lang.Boolean">true</value>
				</entry>
				<entry key="overrideTypesList">
					<list>
					<!--  THIS LIST IS IMPORTANT, it exposes these classes to the aegis XSD creator
					so we can output the generic Entry class in lists in the Collector Service Endpoint Class
					but actually output any of its subclasses. Hence, this is a way of dealing with
					inheritence in CXF and aegis -->
						<value>uk.ac.cardiff.model.AuthenticationEntry</value>
						<value>uk.ac.cardiff.model.ShibbolethEntry</value>
						<value>uk.ac.cardiff.model.UsageEntry</value>
					</list>
				</entry>
			</map>
		</property>
	</bean>

	<!--  DONE -->

	<!-- Polling trigger setup -->

	<!--<bean id="ICAProcessTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref local="ICAProcessJobDetail" />
		</property>
		<property name="cronExpression">
			<value>0 * * * * ?</value>
		</property>
	</bean>

	--><bean id="ICAProcessQuickTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail">
			<ref local="ICAProcessJobDetail" />
		</property>
		<property name="repeatInterval" value="2000" />
		<!-- <property name="repeatCount" value="0" />-->
	</bean>

	<bean id="ICAProcessJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="ICAProcess" />
		</property>
		<property name="targetMethod">
			<value>capture</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list><!--
				<ref local="ICAProcessTrigger" />
				-->
				<ref local="ICAProcessQuickTrigger" />
			</list>
		</property>
	</bean>
	<!--  DONE -->


	<bean id="ICAProcess" class="main.uk.ac.cf.service.impl.ICAProcessImpl">
		<property name="engine">
			<ref bean="CaptureEngine"></ref>
		</property>
	</bean>

	<!--
		this bean config kicks of the singleton engine instance which is then
		used by all services of the ICA
	-->
	<bean id="CaptureEngine" class="main.uk.ac.cf.engine.CaptureEngine">
		<property name="authRegister">
			<ref bean="dataAccessRegister"></ref>
		</property>
	</bean>


	<!--  HIBERNATE DAO -->
	<bean id="icaSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource"><ref local="icaDatasource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect"> org.hibernate.dialect.PostgreSQLDialect</prop> <!-- database type -->
				<prop key="hibernate.show_sql">true</prop>  <!-- outputs the SQL queries used to the standard logger -->
			  <prop key="hibernate.hbm2ddl.auto">update</prop> <!-- update changes the db if mapping changes, creates the db if none exists, in production do not use any of these -->
				<prop key="hibernate.c3p0.minPoolSize">5</prop> <!-- IMPORTANT this then uses the c3po pooling which is better than hibs implementation for production systems -->
   				<prop key="hibernate.c3p0.maxPoolSize">20</prop>
   				<prop key="hibernate.c3p0.timeout">600</prop>
   				<prop key="hibernate.c3p0.max_statement">50</prop>
			</props>
		</property>
		<!--  OR mapping files. -->
		<property name="mappingResources">
			<list>
				<value>uk/ac/cardiff/model/entry.hbm.xml</value>
			</list>
		</property>
	</bean>

		<!--
		Set Up Basic Apache DataSource for accessing the hibernate database
	-->
	<bean id="icaDatasource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.postgresql.Driver" />
		<property name="url" value="jdbc:postgresql://localhost/idman-objectdata" />
		<property name="username" value="postgres" />
		<property name="password" value="" /> <!--  no password, bad idea! -->
	</bean>


	<import resource="data-access.xml" />

</beans>
